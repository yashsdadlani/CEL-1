% Define the ODE function
f = @(t, y) y .* t .^ 2 - 1.1 .* y;
% Define initial condition
y0 = 1;
% Define time interval
t_start = 0;
t_end = 2; % adjust the endpoint as needed
% Step sizes
h1 = 0.5;
h2 = 0.25;
% Initialize arrays to store results
t_values = t_start:h1:t_end;
y_values_meuler1 = zeros(size(t_values));
% Set initial value
y_values_meuler1(1) = y0;
% Modified Euler method with step size h1
for i = 2:length(t_values)
% Predictor step using Euler's method
y_pred = y_values_meuler1(i - 1) + h1 * f(t_values(i - 1), y_values_meuler1(i -
1));
% Corrector step
y_values_meuler1(i) = y_values_meuler1(i - 1) + 0.5 * h1 * (f(t_values(i - 1),
y_values_meuler1(i - 1)) + f(t_values(i), y_pred));
end
% Initialize arrays for the second run with step size h2
t_values = t_start:h2:t_end;
y_values_meuler2 = zeros(size(t_values));
% Set initial value
y_values_meuler2(1) = y0;
% Modified Euler method with step size h2
for i = 2:length(t_values)
% Predictor step using Euler's method
y_pred = y_values_meuler2(i - 1) + h2 * f(t_values(i - 1), y_values_meuler2(i -
1));
% Corrector step
y_values_meuler2(i) = y_values_meuler2(i - 1) + 0.5 * h2 * (f(t_values(i - 1),
y_values_meuler2(i - 1)) + f(t_values(i), y_pred));
end
% Analytical solution
y_analytical = exp(-t_values.^3 / 3);
% Plot results
figure;
hold on;
legend('Location', 'best');
plot(t_values, y_values_meuler2, '
-o', 'DisplayName', 'Modified Euler (h = 0.25)');
plot(t_values, y_analytical, 'DisplayName', 'Analytical');
xlabel('t');
ylabel('y(t)');
title('Numerical Solutions using Modified Euler Method');
legend;
grid on;
hold off;
